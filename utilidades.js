const URL_ACTIVA = "https://script.google.com/macros/s/AKfycbxb2sFaHYYt5Zf5YeYwnRnn5JZKA5_4uzIfnLeuLAfroPDAovKVqVYwTmQTPFrSiFeXBQ/exec"; //prueba30

const URL_ACTIVA0 = 'https://script.google.com/macros/s/AKfycbw7TX3aK6ddk7q8qqML4VF9DkDWoRebNIOY6bzQOVmAsb1gvsgljHyp08LkZQVOtTP-/exec'

//
function $(id) {
  return document.getElementById(id);
}

// Get value
function GV(id) {
  const x = document.getElementById(id);
  return x.value;
}

// Limpia la entrada
function CLi(id) {
  const x = $(id);
  x.value = '';
}

// Regresamos el value de los elementos
function VL(id) {
  const x = $(id).value;
  return x;
}

//
const estados = [
  "Aguascalientes", "Baja California", "Baja California Sur", "Campeche",
  "Chiapas", "Chihuahua", "Ciudad de M√©xico", "Coahuila", "Colima",
  "Durango", "Guanajuato", "Guerrero", "Hidalgo", "Jalisco", "M√©xico (Edo.)",
  "Michoac√°n", "Morelos", "Nayarit", "Nuevo Le√≥n", "Oaxaca", "Puebla",
  "Quer√©taro", "Quintana Roo", "San Luis Potos√≠", "Sinaloa", "Sonora",
  "Tabasco", "Tamaulipas", "Tlaxcala", "Veracruz", "Yucat√°n", "Zacatecas"
];

const disciplinas = [
  "Alta Monta√±a",
  "Barranquismo",
  "Escalada Deportiva",
  "Escalada en roca",
  "Espeleolog√≠a",
  "Senderismo",
  "V√≠a Ferrata",
  "Escalada en hielo"
];

const tipoSangre = [
  "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"
];

const elGenero = ["Masculino", "Femenino"];

const la_Escolaridad = [
  "Primaria", "Secundaria", "Media superior", "Superior"
];

const funcion = [
  "Deportista", "Entrenador", "Fisiatra", "Juez/√Årbitro", "Personal administrativo", "Prensa",
  "Voluntariado", "Personal t√©cnico", "Consejo directivo", "Servicio m√©dico"
];

const funcion_personalTec = [
  "Equipador de rutas", "Equipador de barrancos", "Registro de senderos", "Medio ambiente", "Acceso", "Seguridad", "Armador de bloques"
];
const funcion_consejo = [
  "Presidente club", "Vicepresidente club", "Secretario club", "Presidente asociaci√≥n", "Vicepresidente asociaci√≥n",
  "Tesorero asociaci√≥n", "Secretario asociaci√≥n", "Vocal directivo asociaci√≥n", "Vocal deportivo asociac√≥n", "Comisario asociaci√≥n", "Representante jur√≠dico asociaci√≥n"
];

const funcion_serMed = [
  "M√©dico", "Psic√≥logo", "Nutri√≥logo"
];


const fieldMapping = {
  'fichaID': {
    jsonKey: 'ID',
    editType: 'text'
  },
  'nombre': {
    jsonKey: 'Nombre',  // Nombre del par clave en el JSON recibido
    editType: 'text' // input type="text"
  },
  'apellidoPaterno': {
    jsonKey: 'Apellido Paterno',
    editType: 'text'
  },
  'apellidoMaterno': {
    jsonKey: 'Apellido Materno',
    editType: 'text'
  },
  'fechaNacimiento': {
    jsonKey: 'Fecha de nacimiento',
    editType: 'date'
  },
  'telefono': {
    jsonKey: 'Tel√©fono',
    editType: 'text'
  },
  'email': {
    jsonKey: 'Correo',
    editType: 'email'
  },
  'curp': {
    jsonKey: 'CURP',
    editType: 'text'
  },
  'genero': {
    jsonKey: 'G√©nero',
    editType: 'select'
  },
  'escolaridad': {
    jsonKey: 'Escolaridad',
    editType: 'select'
  },
  'estado': {
    jsonKey: 'Estado',
    editType: 'select'
  },
  'municipio': {
    jsonKey: 'Municipio',
    editType: 'text'
  },
  'colonia': {
    jsonKey: 'Colonia',
    editType: 'text'
  },
  'calleNum': {
    jsonKey: 'Calle y n√∫mero',
    editType: 'text'
  },
  'zip': {
    jsonKey: 'C.P.',
    editType: 'text'
  },
  'contEmergencia': {
    jsonKey: 'Contacto emergencia',
    editType: 'text'
  },
  'telEmergencia': {
    jsonKey: 'Tel√©fono emergencia',
    editType: 'text'
  },
  'enfermedades': {
    jsonKey: 'Enfermedades',
    editType: 'text'
  },
  'alergias': {
    jsonKey: 'Alergias',
    editType: 'text'
  },
  'tipoSangre': {
    jsonKey: 'Tipo de sangre',
    editType: 'select'
  },
  'club': {
    jsonKey: 'Club',
    editType: 'select'
  },
  'disciplinas': {
    jsonKey: 'Disciplinas',
    editType: 'text'
  },
  'funcion': {
    jsonKey: 'Funci√≥n',
    editType: 'select'
  },
  'subfuncion': {
    jsonKey: 'Subfunci√≥n',
    editType: 'select'
  }
};

/* A la izquierda van los nombres de los controles usados en el formulario
y a la derecha el nombre del valor recibido del JSON.*/
const fieldMappingEventos = {
  'eventName': 'Nombre del evento',
  'eventStart': 'Fecha Inicial',
  'eventEnd': 'Fecha Final',
  'eventDuration': 'Duraci√≥n',
  'eventLocation': 'Lugar del evento',
  'eventFee': 'Cuota de recuperaci√≥n',
  'registrationDeadline': 'Fecha l√≠mite inscripci√≥n',
  'depositInfo': 'Datos dep√≥sito',
  'eventPoster': 'Imagen',
  'contactPhone': 'Informes Tel√©fono',
  'contactEmail': 'Informes correo',
  'contactLink': 'Informes link p√°gina',
};

const fieldMappingCompetencia = {
  "competenciaName": "Nombre competencia",
  "competenciStart": "Fecha Competencia",
  "competenciaLugar": "Lugar",
  "competenciaRama": "Rama",
  "competenciaCategoria": "Categor√≠a",
  "competenciaSubcategoria": "Sub-categor√≠a",
  "competenciaCosto": "Costo",
  "competenciaDDeposito": "Datos dep√≥sito",
  "competenciaCelular": "Celular",
  "competenciaCorreo": "Correo",
  "competenciaWeb": "P√°gina web",
  "eventCompetencia": "Imagen"
};

function validarArchivoImagen(inputID, previewID) {
  const input = document.getElementById(inputID);
  const preview = document.getElementById(previewID);

  // Ac√° agregamos el listener para que cuando el usuario cargue una imagen se analice.
  input.addEventListener("change", async e => {
    console.log("Procesando imagen....");
    const archivo = e.target.files[0];
    preview.innerHTML = "";
    // Variables globales
    base64Comprobante = null;
    imagenProcesadaOK = false;

    if (!archivo) return;

    if (archivo.type === "image/bmp") {
      mostrarToast("Formato .bmp no permitido. Usa JPG o PNG");
      input.value = ""; // limpia el campo
      return;
    }    
    try {
      /* Pedimos salida con peso incluido */
      const { base64, kb } = await convertirArchivoABase64(archivo, true);
      console.log(` Conversi√≥n final (${archivo.name}): ${kb} KB`);
      base64Comprobante = base64;
      imagenProcesadaOK = true;

      const img = document.createElement('img');
      img.src = URL.createObjectURL(archivo);
      img.style.maxWidth = '100%';
      img.style.marginTop = '10px';
      preview.appendChild(img);

    } catch (err) {
      mostrarToast(err);      // mensaje claro al usuario
      console.warn(err);
      input.value = '';       // reseteamos selecci√≥n
    }
  });
}

/*
 * convertirArchivoABase64(archivo,  debug = false)
 *  ‚Äì Admite JPG / PNG  (los PNG se convierten a JPG dentro del canvas)
 *  ‚Äì Devuelve {base64, kb}  si debug === true
 *  ‚Äì Devuelve solo base64     si debug === false
 */
function convertirArchivoABase64(archivo, debug) {
  const LIMITE_KB = 250;            // cambia a tu gusto
  return new Promise((resolve, reject) => {
    const intentar = (calidad) => {
      const reader = new FileReader();
      reader.onload = e => {
        const img = new Image();
        img.onload = () => {
          /* Creamos canvas y redimensionamos */
          const MAX_W = 800;
          const esc = Math.min(1, MAX_W / img.width);
          const w = img.width * esc;
          const h = img.height * esc;

          const cv = document.createElement('canvas');
          cv.width = w;
          cv.height = h;
          const ctx = cv.getContext('2d');
          ctx.drawImage(img, 0, 0, w, h);

          /* üîç  Elegimos formato de salida:
                 ‚Äì Si era PNG ‚áí lo convertimos a JPEG para comprimir
                 ‚Äì Si era JPEG, sigue igual
          */
          const mimeSalida = 'image/jpeg';
          const base64 = cv.toDataURL(mimeSalida, calidad);   // calidad 0.4‚Äì0.9
          const kb = Math.round((base64.length * 3) / 4 / 1024);

          if (kb > LIMITE_KB && calidad > 0.4) {
            // nuevo intento con calidad m√°s baja
            console.log("Intento √∫ltimo");
            return intentar(0.4);
          }
          if (kb > LIMITE_KB) {
            console.log("Imagen muy grande");
            return reject(`Imagen demasiado grande (${kb} KB)`);
          }
          // √âxito
          if (debug) {
            console.log("√âxito dice...");
            return resolve({ base64, kb });
          }
          resolve(base64);
        };
        img.onerror = () => reject('Error al cargar imagen');
        img.src = e.target.result;
      };
      reader.onerror = reject;
      reader.readAsDataURL(archivo);
    };

    if (!/^image\/(jpeg|png)$/i.test(archivo.type)) {
      return reject('Formato no soportado (solo JPG / PNG)');
    }
    intentar(0.7);    // primer intento con calidad 0.7
  });
}


function _convertirArchivoABase64(archivo) {
  console.log("Convirtiendo archivo");
  return new Promise((resolve, reject) => {
    const intentarCompresion = (calidad) => {
      const img = new Image();
      const reader = new FileReader();

      reader.onload = e => {
        img.onload = () => {
          const canvas = document.createElement('canvas');
          const maxAncho = 800;
          const escala = maxAncho / img.width;
          canvas.width = Math.min(maxAncho, img.width);
          canvas.height = img.height * escala;

          const ctx = canvas.getContext('2d');
          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

          const base64 = canvas.toDataURL('image/jpeg', calidad);
          const tama√±oKB = Math.round((base64.length * 3) / 4 / 1024);

          if (tama√±oKB > 500 && calidad > 0.4) {
            mostrarToast(`La imagen es grande (${tama√±oKB} KB). Intentando m√°s compresi√≥n...`);
            return intentarCompresion(0.4); // intento final
          }

          if (tama√±oKB > 500) {
            mostrarToast(`La imagen sigue siendo muy pesada (${tama√±oKB} KB). Usa otra m√°s ligera.`);
            return reject("Imagen demasiado grande despu√©s de dos intentos");
          }

          resolve(base64);
        };

        img.onerror = () => reject("Error al cargar imagen");
        img.src = e.target.result;
      };

      reader.onerror = reject;
      reader.readAsDataURL(archivo);
    };

    if (archivo.type === "image/bmp") {
      mostrarToast("Formato .bmp no permitido. Usa JPG o PNG");
      return reject("Formato no soportado");
    }

    if (archivo.size <= 220 * 1024) {
      const reader = new FileReader();
      reader.onload = e => resolve(e.target.result);
      reader.onerror = reject;
      reader.readAsDataURL(archivo);
    } else {
      intentarCompresion(0.6);
    }
  });
}


function mostrarToast(mensaje, duracion = 3000) {
  const toast = $("toast");
  toast.textContent = mensaje;
  toast.className = "toast show";
  setTimeout(() => {
    toast.className = "toast"; // quita la clase .show
  }, duracion);
}
